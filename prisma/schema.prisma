// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// You need to change provider.
// To use third party database: url = env("DATABASE_URL")
// Such as postgresql, mysql or mongodb. 

datasource db {
  provider = "sqlite"
  url      = "file:../db/prod.db"
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  name         String
  lastname     String?
  nickname     String?        @unique
  password     String
  isAdmin      Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Form         Form[]
  FormAnswered FormAnswered[]
}

model Form {
  id           String         @id @default(uuid())
  revisionText String
  authorId     Int
  author       User           @relation(fields: [authorId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  question     Question[]
  FormAnswered FormAnswered[]
}

model Topic {
  id        Int        @id @default(autoincrement())
  topic     String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  questions Question[]
}

model Question {
  id             Int              @id @default(autoincrement())
  question       String           @unique
  topicId        Int?
  topic          Topic?           @relation(fields: [topicId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Forms          Form[]
  FormAnswered   FormAnswered[]
  PossibleAnswer PossibleAnswer[]
}

model PossibleAnswer {
  id         Int      @id @default(autoincrement())
  answer     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model FormAnswered {
  id         String   @id @default(uuid())
  answer     String?
  statusId   Int
  status     Status   @relation(fields: [statusId], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  formId     String
  form       Form     @relation(fields: [formId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Status {
  id           Int            @id @default(autoincrement())
  status       String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  FormAnswered FormAnswered[]
}
